Flowchart System Documentation: How to Convert Legal Paperwork into Structured Flowcharts 
Overview 
This document explains the custom flowchart JSON system used to convert legal paperwork into structured, interactive online forms. It includes an in-depth look at the architecture, logic rules, node types, layout guidelines, and conditional branching. It is designed to allow any AI or developer to understand and replicate the system from scratch. 
1. Purpose of the System 
The system is designed to: - Take complex legal paperwork and simplify it into a user-guided flow. - Create a visual flowchart that represents the logical and conditional journey of a form. - Export that structure into JSON which is read by a custom form-rendering engine. 
2. Core Concepts 
2.1 Nodes 
Each part of a form is a node. Types include: - Question nodes: Textbox, dropdown, date, etc. - Option nodes: Yes/No choices for dropdowns and checkboxes - Edges: Connect two nodes to define flow logic 
2.2 Sections 
•  
Group related questions into visually distinct zones. 
•  
Identified using sectionPrefs , which assigns each node a section name and style. 2.3 Geometry 
•  
Each node has geometry.x , geometry.y , width , and height values. •  
This ensures the chart remains readable and organized. 
3. JSON Structure 
Each flowchart is represented in a JSON object:  
{ 
"cells": [ ...nodes and edges... ], 
1
"sectionPrefs": { ...section metadata... } 
} 
3.1 Question Node Format 
{ 
"id": "2", 
"vertex": true, 
"edge": false, 
"value": "<div style=...>Question Text</div>", 
"style": "shape=roundRect;...;fontSize=16;...", 
"geometry": { "x": ..., "y": ..., "width": ..., "height": ... }, "_questionText": "What is your name?", 
"_nameId": "answer1", 
"_questionId": 1, 
"nodeId": "unique_node_name" 
} 
- Note: Set fontSize=16 or higher for better legibility. 
3.2 Option Node Format 
Used by dropdowns/checkboxes:  
{ 
"id": "3", 
"vertex": true, 
"edge": false, 
"value": "<div style=...>Yes</div>", 
"style": "...", 
"geometry": { ... } 
} 
3.3 Edge Format 
{ 
"id": "4", 
"vertex": false, 
"edge": true, 
"source": "2", 
"target": "3", 
"style": "", 
2
"geometry": {} 
} 
3.4 SectionPrefs Format 
"sectionPrefs": { 
"1": { 
"borderColor": "hsl(0, 100%, 80%)", 
"name": "Applicant Information" 
} 
} 
4. Supported Question Types 
questionType Description
	text Single-line input
	text2 Dropdown with options
	checkbox Yes/No or multi-select checkbox
	number Numeric input only
	date Date picker
	dateRange Two date inputs (start and end)
	bigParagraph Long textarea
	email Email input
	phone Phone number
	multipleTextboxes Several labeled textboxes in one question
	multipleDropdownType Repeating group based on number selection
	



Extra Fields: - multipleTextboxes : Uses _textboxes array with placeholder names. - multipleDropdownType : Uses _twoNumbers and _textboxes with isAmountOption flag. 
5. Logic Rules 
5.1 Node Linking 
•  
Dropdown/Checkbox nodes → link to option nodes → link to next question •  
Text, date, email, number → link directly to next question node 3
•  
Always connect question nodes with edge elements to define flow. 5.2 Conditional Logic 
•  
Branches are created by linking each option node to a different follow-up node. •  
Linear flows skip option nodes entirely and link directly. 
6. Visual Guidelines 
•  
Use geometry.x/y to lay out nodes in a clean vertical (linear) stack. •  
Question text must be legible—use fontSize=16 or higher. 
•  
Keep node dimensions consistent (160×80, or wider for multi-input nodes). •  
Use fillColor , fontColor , and strokeColor for visual grouping. 
7. Sample Form: Hunger Example 
•  
Section 1: Hunger Assessment 
•  
Dropdown: Are you hungry? → Yes/No •  
Section 2: Hunger Response 
•  
Yes → Textbox: What would you like to eat? 
•  
No → Dropdown: Are you thirsty? → Yes/No 
8. Real-World Example: Rental Application 
•  
MultiTextbox: What's your full name? → First, Middle Initial, Last •  
Phone: What's your contact number? 
•  
MultiTextbox: What is your ID info? → ID Type, Number, Issuer, Expiry •  
Textbox: What is your SSN or ITIN? 
•  
Date: When were you born? •  
Textbox: Do you have another ID? 
•  
Email: What's your email address? 
All nodes are linked top-to-bottom with edge objects, and laid out vertically in a clear flow. 9. Best Practices 
•  
Use multipleTextboxes to group related fields. •  
Phrase fields as human-friendly questions. •  
Always link nodes explicitly. •  
Assign readable fontSize . 
•  
Maintain linear top-down layout with consistent spacing. •  
Assign unique IDs to every node and edge. 
•  
Use sectionPrefs to title and style grouped areas. 4
10. Next Steps for New Forms 
1.  2.  
Break form into logical sections. 
Write each field as a question. 3.  
Select the best questionType . 
4.  
Use multi-input nodes for related fields. 
5.  
Position nodes vertically with consistent geometry.y . 6.  
Create edges between each node. 
7.  
Export to JSON and test in the form tool. 
End of Updated Guide 
5
11. Linking and Branching Best Practices
- Always ensure all nodes are linked exactly as in the user's provided correct output.json, including all conditional branches and direct flows.
- The flowchart logic must match the intended paperwork flow, with no missing or duplicate links.
- When a user provides a corrected or improved JSON, update this documentation to reflect the new linking and logic standards.
- This ensures future versions always follow the most up-to-date linking and branching logic, and never have to relearn these best practices. 
12. Yes/No Question Design Rule
- Always implement yes/no questions as dropdowns with explicit yes/no option nodes and edges.

13. Linking Rule
- Never link a question to multiple subsequent questions unless the logic requires branching. Each question should have a single, clear next step unless conditional branching is intended. 
14. Option Node Placement and Linking Best Practices
- To mathematically center Yes/No option nodes under a parent question node, set their x so that the center of each option aligns symmetrically with the parent node's center, with equal horizontal spacing. For a parent at x=X, width=W, and option width w, Yes at x=X+(W/2)-(w+spacing), No at x=X+(W/2)+spacing.
- Always use consistent vertical spacing between the parent question and its options, and between options and the next question.
- For dropdown/checkbox questions, always link the question node to its option nodes, and each option node to the next question (or branch). Never link questions directly to other questions for these types.
- Never link an option node to multiple questions unless conditional branching is required. Each option node should have a single, clear next step. 
15. Horizontal Spacing Rule
- There must always be 100px of horizontal space between each question/option node for visual clarity and to avoid a squished appearance.
- Update the option node placement formula:
  - For a parent at x=X, width=W, option width=w, and spacing=s (100px):
    - Yes: x = (X + W/2) - (w/2) - s/2
    - No:  x = (X + W/2) + (w/2) + s/2
- This ensures option nodes are perfectly centered and spaced for a visually balanced flowchart. 
16. Vertical Spacing and Layout Rule

-   **Intra-Section Spacing:** Nodes within the same section should have a good amount of vertical spacing between them, enough for some "wiggle room." Maintain an ample gap of at least 100px-150px between nodes to prevent a "squished" or crowded appearance.
-   **Inter-Section Spacing:** Nodes that start new sections should have a lot of vertical distance from the previous section. Create a clear visual break by using a much larger vertical gap, typically 400px or more. This helps users mentally group related parts of the flowchart.

17. Optional Information Rule
- When a form section asks for information that an applicant may not have (e.g., vehicle information, a previous address), always precede the section with a yes/no dropdown question to ask if they have that information. For example, "Do you have a vehicle?" should come before asking for vehicle details.

18. Advanced Guide to Flowchart JSON: Engine Insights

This section provides a developer-level view of how the flowchart tool processes the JSON. Understanding these mechanics is crucial for creating valid and robust flowcharts that load correctly every time.

18.1 The Two-Pass Loading System

The rendering engine uses a two-pass system (`loadFlowchartData` function) to build the visual flowchart from your JSON:

1.  **First Pass (Vertices):** The engine iterates through the `cells` array and creates all the *vertices* (i.e., any object where `"vertex": true`). It creates the nodes, positions them using their `geometry`, and assigns all their custom properties (like `_questionText`, `_textboxes`, etc.). At this stage, no connections are made.

2.  **Second Pass (Edges):** The engine iterates through the `cells` array a second time, but now it only looks for *edges* (i.e., any object where `"edge": true`). For each edge, it finds the `source` and `target` nodes that were created in the first pass (using their matching `id`s) and draws the visual connection between them.

**Implication:** This is why correct linking is paramount. If an edge object's `source` or `target` ID does not correspond to a vertex object's `id`, the link will fail to render, creating a broken flow. Every single node that should be connected *must* have a corresponding edge object defining that link.

18.2 Anatomy of a Valid Node (Vertex)

For a node to be valid, it must contain the following properties, as extracted by the `exportFlowchartJson` function:

-   `"id"`: A **unique string** that identifies the node. This is the reference used by edge objects.
-   `"vertex": true`: Identifies this object as a shape/node.
-   `"edge": false`: Explicitly marks this as not an edge.
-   `"value"`: The HTML content that is displayed inside the node. For simple nodes, this can be a `<div>` with centered text. For complex types like `"multipleTextboxes"`, this **must be the full HTML structure** for the interactive element, including input fields, buttons, and `onblur`/`onclick` JavaScript handlers. The rendering engine uses this HTML directly.
-   `"style"`: A string of key-value pairs separated by semicolons that defines the node's appearance and, crucially, its type (`nodeType=question`, `questionType=text2`, etc.).
-   `"geometry"`: An object with `"x"`, `"y"`, `"width"`, and `"height"` properties that define the node's position and size on the canvas.

**Essential Custom Properties (`_` prefix):**

These properties are not part of the core `mxGraph` library but are critical for the form-rendering engine. They must be included for the node to function correctly.

-   `"_questionText"`: The actual question text, stripped of HTML.
-   `"_nameId"`: A machine-readable identifier for the answer given to this question.
-   `"_questionId"`: A sequential integer ID. This can be re-calculated by the tool, but it's good practice to set it.
-   `"_textboxes"`: An array of objects for `"multipleTextboxes"` questions, e.g., `[{"nameId": "first_name", "placeholder": "First Name"}]`.
-   Other properties like `_twoNumbers`, `_placeholder`, `_image`, and various `_calc` fields are required for their respective node types.

18.3 Anatomy of a Valid Link (Edge)

An edge is simpler but just as critical:

-   `"id"`: A unique string for the edge itself.
-   `"vertex": false`: Explicitly marks this as not a node.
-   `"edge": true`: Identifies this object as a connector.
-   `"source"`: The `id` of the starting node for the connection.
-   `"target"`: The `id` of the ending node for the connection.
-   `"style"`: Can be used to style the edge (e.g., arrows), but is often an empty string `""`.
-   `"geometry": {}`: Usually an empty object, as the renderer calculates the path.

By ensuring every flowchart JSON adheres to this structure—with every vertex fully defined, every connection explicitly created with a corresponding edge object, and proper vertical spacing—we can guarantee that the flowchart will render correctly and function as intended within the tool. 

19. Flowchart Outline Best Practices

- **Always start with an outline:** Before building the flowchart JSON, create a flowchart outline that lists every question, its type, and any conditional logic or branching. This outline acts as a blueprint for the flowchart and ensures completeness and clarity.
- **What to include:**
  - The exact text of each question as it will appear to the user.
  - The question type (e.g., text, number, date, dropdown, multipleTextboxes, etc.).
  - Any options for dropdowns or checkboxes (e.g., Yes/No).
  - Conditional logic (e.g., "If Yes, ask... If No, skip to...").
  - Group questions into logical sections that match the form's structure.
- **Why this matters:**
  - Prevents missing or duplicating questions.
  - Makes it easy to spot and plan for conditional branches.
  - Ensures the flowchart matches the intent and logic of the original form.
  - Allows for easier review and feedback before implementation.
- **How to create a good outline:**
  1. Read through the entire form and break it into logical sections.
  2. For each field, write the question as it should appear to the user.
  3. Assign the correct question type for each field.
  4. Note any options or special input requirements.
  5. Clearly indicate any conditional logic or branching.
  6. Review the outline for completeness and logical flow before building the JSON.
- **Example:**
  See `outline.txt` for a sample outline based on the rental application form. 

20. Visual Style Requirements for All Nodes

To ensure a visually pleasing and consistent flowchart, all nodes (questions, options, etc.) must use the following style properties:

- shape=roundRect
- rounded=1
- arcSize=20
- whiteSpace=wrap
- html=1
- spacing=12
- fontSize=16 (or higher for legibility)
- align=center
- verticalAlign=middle
- pointerEvents=1
- overflow=fill
- section=<section number>
- nodeType=question or nodeType=option (as appropriate)
- questionType=<type> (for questions)
- nodeId=<unique_node_id>
- fillColor, fontColor, strokeColor: Use a harmonious color scheme (e.g., fillColor=#cce6ff, fontColor=#070665, strokeColor=hsl(0, 100%, 80%))

**Option nodes** should use a visually distinct but harmonious color palette (e.g., fillColor=#fffde7, fontColor=#b26a00).

**Example style string:**

shape=roundRect;rounded=1;arcSize=20;whiteSpace=wrap;html=1;nodeType=question;spacing=12;fontSize=16;align=center;verticalAlign=middle;section=1;questionType=text;pointerEvents=1;overflow=fill;nodeId=what_is_your_name;fillColor=#cce6ff;fontColor=#070665;strokeColor=hsl(0, 100%, 80%)

**Rationale:**
- This ensures all flowcharts are visually consistent, modern, and easy to read.
- Rounded corners and spacing prevent a "boxy" or crowded appearance.
- The color scheme provides clear section grouping and visual hierarchy.

**Enforcement:**
- All new nodes must use this style. If a user provides a new preferred style, update this section and use it for all future work. 

21. Advanced Flowchart Layout and Readability Rules

To maximize readability and maintain a professional, user-friendly appearance, all flowcharts must follow these layout rules:

- **Option Node Alignment:** All option nodes for a question must be placed in a single, evenly spaced horizontal row directly beneath the parent question node.
- **Branching Question Placement:** Any follow-up question node (e.g., conditional questions like 'If LLC, specify tax classification...') must be placed directly beneath its relevant option node, with clear vertical alignment.
- **Downstream Node Centering:** Nodes that are the next step for multiple branches (e.g., 'Exemptions...') must be centered horizontally under their logical parent(s) to avoid edge crossings and tangling.
- **Edge Clarity:** All edges should be straight, direct, and never cross unnecessarily. Avoid diagonal or tangled lines.
- **Spacing:** Maintain generous, consistent horizontal and vertical spacing between all nodes and rows. Never allow nodes or edges to appear crowded or overlapping.
- **Visual Grouping:** Always visually group related branches and keep conditional logic clear and easy to follow.

**Rationale:**
- These rules ensure the flowchart is easy to read, visually appealing, and that the logic is immediately clear to users and reviewers.
- They prevent the "spaghetti diagram" effect and make it easy to spot errors or missing logic.

**Enforcement:**
- All new flowcharts must follow these layout rules. If a user provides a new preferred layout, update this section and use it for all future work. 

**Additional Visual Clarity Rules:**
- All option nodes for a question must be the same width, and all question nodes must be the same (wider) width for visual consistency.
- Option nodes must be spaced so their edges do not touch or overlap, even for long labels.
- For long labels, increase node width or use line breaks to prevent overflow or horizontal scrolling.
- Always center the row of option nodes under the parent question node.
- Increase vertical spacing between rows to prevent edge overlap and crowding.

**Rationale:**
- These rules ensure the flowchart is visually clear and easy to read, even for complex or long labels.
- They prevent overflow and horizontal scrolling, and maintain a professional appearance.

**Enforcement:**
- All new flowcharts must follow these layout rules. If a user provides a new preferred layout, update this section and use it for all future work. 

**Option Node Order and Centering:**
- Option nodes must be ordered left-to-right to match the logical flow of the form (not just alphabetical or random order).
- Branching nodes (e.g., conditional follow-ups) must be centered directly beneath their relevant option(s), with no overlap.
- The entire flowchart should be visually centered and balanced, with all rows and branches aligned for maximum clarity.

**Rationale:**
- These rules ensure the flowchart is visually clear and easy to read, even for complex or long labels.
- They prevent overflow and horizontal scrolling, and maintain a professional appearance.

**Enforcement:**
- All new flowcharts must follow these layout rules. If a user provides a new preferred layout, update this section and use it for all future work. 

22. How to Prevent Overlapping Branching Nodes

1. **Dynamic Vertical Stacking for Branching Nodes**
   - If two (or more) branching nodes would overlap horizontally, stack them vertically instead of placing them on the same row.
   - For example, place "Do you have any foreign partners…" on a row below "If LLC, specify tax classification…", with enough vertical space between them.

2. **Automatic Node Width Adjustment**
   - Set a maximum width for branching nodes. If the label is too long, use line breaks or increase the node's height, not its width, to avoid encroaching on neighboring nodes.

3. **Smart Branching Node Placement**
   - Calculate the x/y positions of all branching nodes after laying out the option nodes.
   - If a branching node would overlap with another, move it down to the next available row.
   - Always check for overlap before finalizing node positions.

4. **Minimum Vertical Spacing**
   - Enforce a minimum vertical gap between all rows, and increase it if a wide node is present.

5. **System Guide Rule**
   - If two or more branching nodes would overlap horizontally, always stack them vertically with sufficient vertical spacing to ensure all text is readable and no nodes overlap. 

23. Universal Overlap Prevention Rule

- After laying out all nodes, check for and resolve any vertical or horizontal overlaps between any nodes, not just branching nodes.
- Always enforce at least the minimum vertical and horizontal spacing between all nodes (e.g., 100–150px vertically, 100px horizontally).
- If any nodes would overlap, automatically move the lower or rightmost node(s) to maintain the required gap.
- This rule applies to all nodes, including questions, options, and branching nodes, throughout the entire flowchart.

24. Advanced Vertical Spacing and Multi-Input Node Rule

- **Vertical spacing and node geometry must be set to allow for very tall multi-input nodes (e.g., multipleTextboxes, multipleDropdownType) and generous vertical spacing above and below.**
- Node heights and y-coordinates should be set to match the gold standard provided in the latest correct output.json (see example in user message). For example, a multi-input node may have a height of 430px or 480px, and y-coordinates should be set so that there is ample space above and below such nodes.
- All node values (HTML), styles, and geometry must match the gold standard for maximum readability and visual clarity.
- This approach is mandatory for all node types and sections, and must be enforced in all future flowcharts.

**Rationale:**
- This ensures that even the tallest nodes are never crowded, and the flowchart remains visually clear, readable, and professional.
- It is robust and future-proof, scaling to any form complexity.

**Enforcement:**
- All new flowcharts must use this vertical spacing and geometry rule. If a user provides a new preferred spacing or geometry, update this section and use it for all future work.

25. Downstream Node Stacking and Linking Rule

- When a node has multiple downstream questions (not just options), always stack them vertically with sufficient spacing.
- Ensure all downstream nodes are linked in the correct sequential order (e.g., Node A -> Node B -> Node C).
- Never skip or omit downstream nodes in the flowchart or in the JSON.
- Always verify that all nodes are visible and connected in the rendered flowchart. 

26. Dropdown for Limited Answers Rule

- Whenever a question has a limited set of possible answers, always implement it as a dropdown with explicit option nodes for each answer.
- Example: For 'If LLC, specify tax classification (C, S, or P)', use a dropdown with options labelled C, S, and P.

27. Qualifying Question Precedence Rule

- Always precede a question with a qualifying yes/no dropdown if not all users will have an answer to that question.
- Example: Before asking 'Exempt payee code (if any)', first ask 'Do you have a payee code?' as a dropdown with Yes/No options. If Yes, show the follow-up question; if No, skip to the next relevant question. 

28. Vertical Spacing and Option Row Rules

- All question nodes (except for option rows) must have a large vertical gap (at least 150–200px) from the nodes above and below them.
- Only option nodes belonging to the same question should share similar y-values (i.e., be in a single horizontal row directly beneath their parent question node).
- In all other cases, nodes should never have similar y-values; maintain generous vertical spacing for maximum readability.

29. Explicit Option Node Linking Rule

- Every option node (e.g., Yes/No, C/S/P, etc.) must be explicitly linked from its parent question node with a dedicated edge.
- Never omit these links, even for simple Yes/No dropdowns or other limited-answer questions.

30. Pre-Submission Validation Rule

- Before providing a new output.json, always check that all nodes (except option rows) have large vertical spacing, and that all option nodes are properly linked from their parent question.
- If any node violates these rules, fix the layout and links before submitting. 

31. Explicit Option Node and Linking Rules for Qualifying Questions

- Explicitly create Yes/No option nodes for every qualifying question (not just Yes/No values in the question node).
- Link the parent question node to its option nodes (never directly to the next question).
- Link each option node to the correct next node (e.g., Yes → follow-up, No → skip or next branch).
- Ensure all geometry (x/y) values are set so that the flow is visually continuous and vertically stacked, with each follow-up node directly below its logical parent.
- Remove all duplicate/conflicting edges and floating nodes.
- Validate the entire flow for a single, unbroken chain, matching the working example exactly.
- No floating or disconnected nodes: every option node is only linked from its parent question and only points to the correct next node.
- The flow must be a single, unbroken chain, with no cycles, duplicates, or floating nodes.
- The y-values for each node are set so that the flow is visually continuous, with each follow-up node directly below its logical parent. 