# Flowchart Creation Tool - Features Documentation

## üìã **Table of Contents**
1. [Core Features](#core-features)
2. [Node Types](#node-types)
3. [Conditional Logic](#conditional-logic)
4. [Data Persistence](#data-persistence)
5. [User Interface](#user-interface)
6. [Advanced Features](#advanced-features)
7. [Integration Features](#integration-features)

---

## üéØ **Core Features**

### **1. Flowchart Creation & Editing**
- **Description**: Interactive flowchart creation using mxGraph library
- **Implementation**: 
  - `graph.js` - Core graph functionality and node creation
  - `index.html` - Main interface with toolbar and canvas
  - Drag-and-drop node creation from sidebar
  - Real-time editing with visual feedback
- **Key Functions**:
  - `createNode()` - Creates new nodes with specific types
  - `setupCustomDoubleClickBehavior()` - Handles node interactions
  - `updateNodeStyle()` - Applies visual styling to nodes

### **2. Node Management**
- **Description**: Comprehensive node type system with custom properties
- **Implementation**:
  - Multiple node types: textbox, dropdown, checkbox, radio, etc.
  - Custom properties for each node type
  - Dynamic property menus for configuration
- **Key Functions**:
  - `showPropertiesPopup()` - Displays node-specific property menus
  - `updateNodeProperties()` - Saves property changes
  - `isNodeType()` - Identifies node types for conditional logic

---

## üîß **Node Types**

### **1. Standard Question Nodes**
- **Textbox Questions**: Single-line text input
- **Dropdown Questions**: Select from predefined options
- **Checkbox Questions**: Multiple selection options
- **Radio Questions**: Single selection from options
- **Date Questions**: Date picker input
- **Number Questions**: Numeric input with validation
- **Email Questions**: Email format validation
- **Phone Questions**: Phone number formatting

### **2. Specialized Node Types**

#### **Hidden Checkbox Nodes**
- **Description**: Invisible checkboxes that appear when conditions are met
- **Visual**: Checked blue border (dashed) instead of solid
- **Properties**: Node ID input
- **Implementation**: `graph.js` - Custom styling and property handling
- **Key Features**:
  - Automatic Node ID sync with node text
  - Conditional display logic
  - Hidden from PDF reset functions

#### **Hidden Textbox Nodes**
- **Description**: Invisible text inputs that appear when conditions are met
- **Visual**: Checked blue border (dashed) instead of solid
- **Properties**: Node ID input, Default Text input
- **Implementation**: `graph.js` - Custom styling and property handling
- **Key Features**:
  - Automatic Node ID sync with node text
  - Default text preservation
  - Conditional display logic

#### **Linked Logic Nodes**
- **Description**: Light purple nodes that link multiple fields together
- **Visual**: Light purple background
- **Properties**: Multiple dropdown selections, Node ID input
- **Implementation**: `graph.js` - Custom property menu with searchable dropdowns
- **Key Features**:
  - Dynamic dropdown population with search functionality
  - Keyword-based search (e.g., "dog happy toy" finds "the dog is happy to get his toy")
  - Save button to persist changes
  - Custom dropdown UI with real-time filtering

#### **Big Paragraph Nodes**
- **Description**: Multi-line text areas with character/line limits
- **Properties**: Character limit, line limit, paragraph limit, Copy ID button
- **Implementation**: `graph.js` - Custom property handling
- **Key Features**:
  - Copy ID button appends "_overlimit" to node ID
  - Multiple limit types for different validation needs

#### **Sample Question Nodes**
- **Description**: Pre-configured dropdown with Yes/No options
- **Implementation**: `context-menus.js` - `placeSampleQuestion()` function
- **Key Features**:
  - Automatic "Hungry?" dropdown creation
  - Connected Yes/No option nodes
  - Right-click context menu integration

### **3. Multiple Entry Node Types**

#### **Multiple Dropdown Questions**
- **Description**: Dynamic number of dropdown entries based on user selection
- **Implementation**: `graph.js` - `showTextboxLabels()` function
- **Key Features**:
  - Range-based entry generation (e.g., 1-3 creates 3 entries)
  - Location data support (street, city, state, zip, state_short)
  - Hierarchical dragging (moves connected nodes)
  - Copy ID functionality with proper formatting

#### **Multiple Textbox Questions**
- **Description**: Dynamic number of text input entries
- **Implementation**: `graph.js` - Similar to multiple dropdowns
- **Key Features**:
  - Location data support
  - Hidden address textbox generation
  - Automatic address field updates

---

## ‚ö° **Conditional Logic**

### **1. Question Visibility Logic**
- **Description**: Show/hide questions based on previous answers
- **Implementation**: `generate.js` - Conditional logic generation
- **Key Features**:
  - Dynamic condition evaluation
  - Real-time visibility updates
  - Support for checkbox, dropdown, and text conditions

### **2. Business Type Conditional Logic**
- **Description**: Automatically show county question when business type is selected
- **Implementation**: `generate.js` - Dynamic event listener setup
- **Key Features**:
  - Dynamic question name resolution using `questionNameIds`
  - Automatic event listener attachment
  - No hardcoded question names
- **Code Location**: `generate.js` - `setupBusinessTypeConditionalLogic()` function

### **3. Hidden Logic System**
- **Description**: Create hidden elements when conditions are met
- **Implementation**: `generate.js` - `updateHiddenLogic()` function
- **Key Features**:
  - Dynamic hidden element creation
  - Support for checkboxes and textboxes
  - Integration with form submission

---

## üíæ **Data Persistence**

### **1. Autosave System**
- **Description**: Automatic saving of flowchart state
- **Implementation**: `script.js` - Autosave functionality
- **Key Features**:
  - Periodic automatic saves
  - Library flowchart name preservation
  - Restore on page reload with user confirmation
- **Code Location**: `script.js` - Autosave functions

### **2. Library Save/Load**
- **Description**: Save flowcharts to Firebase for later use
- **Implementation**: `library.js` - Firebase integration
- **Key Features**:
  - User authentication required
  - Multiple flowchart storage per user
  - Last used timestamp tracking
  - Search functionality
- **Key Functions**:
  - `saveFlowchart()` - Save current flowchart
  - `saveAsFlowchart()` - Save as new flowchart (NEW FEATURE)
  - `viewSavedFlowcharts()` - Display saved flowcharts

### **3. Import/Export JSON**
- **Description**: Export flowchart data as JSON for backup/sharing
- **Implementation**: `library.js` - JSON serialization
- **Key Features**:
  - Complete flowchart data export
  - All custom properties preserved
  - Cross-platform compatibility

### **4. Save As Functionality** ‚≠ê **NEW FEATURE**
- **Description**: Create new flowchart entries from current work
- **Implementation**: `library.js` - `saveAsFlowchart()` function
- **Key Features**:
  - Always prompts for new name
  - Works even when editing existing flowcharts
  - Creates completely new library entry
  - Updates current flowchart name
- **Use Cases**:
  - Creating variations of existing flowcharts
  - Branching workflows
  - Backup creation before major changes
  - Template creation from existing work

---

## üé® **User Interface**

### **1. Context Menus**
- **Description**: Right-click menus for quick node creation
- **Implementation**: `context-menus.js` - Context menu system
- **Key Features**:
  - Node type selection
  - Sample question creation
  - Empty space node creation
- **Code Location**: `context-menus.js` - Context menu handlers

### **2. Properties Menus**
- **Description**: Dynamic property configuration for each node type
- **Implementation**: `graph.js` - `showPropertiesPopup()` function
- **Key Features**:
  - Node type-specific properties
  - Real-time property updates
  - Click-outside-to-close functionality
  - Custom UI elements (search bars, buttons)

### **3. Searchable Dropdowns** ‚≠ê **NEW FEATURE**
- **Description**: Enhanced dropdowns with search functionality
- **Implementation**: `graph.js` - Custom dropdown UI system
- **Key Features**:
  - Real-time search filtering
  - Keyword-based matching (spaces/underscores)
  - Always-visible options while typing
  - Custom DOM structure for proper positioning
- **Technical Details**:
  - Replaces native `<select>` with custom `div` elements
  - `optionsContainer` with `position: absolute` for proper positioning
  - `normalizeSearchTerm()` and `matchesAllKeywords()` for robust search

### **4. Button Layout** ‚≠ê **NEW FEATURE**
- **Description**: Organized button layout with Save As functionality
- **Implementation**: `index.html` - Button structure
- **Layout** (top to bottom):
  1. **Save As** - Create new flowchart entry
  2. **Save** - Save current flowchart
  3. **Library** - View saved flowcharts
  4. **Settings** - Application settings
  5. **`<br>`** - Visual separation
  6. **Download SVG** - Export as SVG
  7. **Upload flowchart details** - Import flowchart data
  8. **Upload Document PDF** - Import PDF documents

---

## üöÄ **Advanced Features**

### **1. Hierarchical Dragging**
- **Description**: Moving parent nodes drags connected child nodes
- **Implementation**: `events.js` - `MOVE_CELLS` event handler
- **Key Features**:
  - Works for dropdown and checkbox question types
  - Recursive descendant detection
  - Maintains connection relationships
- **Code Location**: `events.js` - `getConnectedDescendants()` function

### **2. Copy-Paste Functionality**
- **Description**: Copy and paste nodes with all properties
- **Implementation**: `script.js` - Clipboard operations
- **Key Features**:
  - Preserves all custom properties
  - Handles hidden node IDs correctly
  - Prevents duplicate event listeners
- **Code Location**: `script.js` - `copySelectedNodeAsJson()` function

### **3. Zoom Functionality**
- **Description**: Mouse wheel zoom with directional control
- **Implementation**: `events.js` - Mouse wheel event handling
- **Key Features**:
  - Directional zoom towards mouse cursor
  - Smooth zoom transitions
  - Bounded zoom limits

### **4. PDF Integration**
- **Description**: PDF document integration with form generation
- **Implementation**: `generate.js` - PDF logic system
- **Key Features**:
  - PDF name inheritance
  - Conditional PDF inclusion
  - PDF pricing integration
  - Filename sanitization (removes .pdf, non-alphanumeric chars)

### **5. Form Debug Menu** ‚≠ê **NEW FEATURE**
- **Description**: Comprehensive debugging interface for form analysis
- **Implementation**: `output.html` - Debug menu system with advanced filtering
- **Key Features**:
  - **Real-time Form Analysis**: Live scanning of all form inputs, selects, and textareas
  - **Advanced Search**: Partial word matching across field names, IDs, and values
  - **Type Filtering**: Filter by input types (text, email, checkbox, radio, etc.)
  - **Virtual Checkbox Detection**: Automatically detects and displays virtual checkboxes from dropdown selections
  - **Export Functionality**: Export all field names and IDs for external analysis
  - **Click-Outside-to-Close**: Intuitive UX with automatic menu closure on overlay background clicks
  - **Clean Interface**: Filters out internal debug fields for user-friendly display
- **Technical Implementation**:
  - **Event-Driven Updates**: Real-time updates on form changes and user interactions
  - **Virtual Element Handling**: `addVirtualDropdownCheckboxes()` creates virtual entries for dropdown combinations
  - **Smart Filtering**: Excludes internal `debugTypeFilter_*` fields from display
  - **DOM Event Management**: Comprehensive event listeners for form state changes
  - **Overlay Click Detection**: Uses `event.target === debugMenu` to detect clicks on overlay background vs content area
  - **Full-Screen Overlay**: 100% width/height overlay with high z-index for proper click detection
- **Access Method**: Press `Ctrl+Shift` to open debug menu
- **Use Cases**:
  - Form validation debugging
  - Field mapping verification
  - Hidden element detection
  - Form structure analysis
  - Development and testing support

### **6. GUI JSON Generation**
- **Description**: Generate structured JSON for form applications
- **Implementation**: `library.js` - `exportGuiJson()` function
- **Key Features**:
  - Structured form data output
  - Linked fields integration
  - Conditional logic preservation
  - PDF name prefix handling

---

## üîó **Integration Features**

### **1. Firebase Authentication**
- **Description**: User authentication and data storage
- **Implementation**: Firebase integration throughout codebase
- **Key Features**:
  - User login/logout
  - Guest user support
  - Data persistence per user
  - Authentication state management

### **2. Form Generation**
- **Description**: Generate HTML forms from flowcharts
- **Implementation**: `generate.js` - Form HTML generation
- **Key Features**:
  - Dynamic form creation
  - Conditional field display
  - Validation integration
  - Responsive design

### **3. URL Parameter Support**
- **Description**: Auto-populate forms from URL parameters
- **Implementation**: `generate.js` - URL parameter parsing
- **Key Features**:
  - Automatic field population
  - URL parameter mapping
  - Form state restoration

---

## üõ† **Technical Implementation Details**

### **1. Dynamic Solutions**
- **Principle**: No hardcoded values, all solutions work with any question names
- **Implementation**: Uses `questionNameIds` mapping for dynamic resolution
- **Example**: Business type conditional logic uses `questionNameIds['11']` instead of hardcoded names

### **2. Event Handling**
- **Principle**: Robust event handling with proper cleanup
- **Implementation**: Event listener management with duplicate prevention
- **Example**: `window.flowchartKeyboardInitialized` flag prevents duplicate keyboard handlers

### **3. DOM Management**
- **Principle**: Proper DOM hierarchy and element positioning
- **Implementation**: Custom dropdown structures with absolute positioning
- **Example**: Search results positioned correctly using `position: relative` containers

### **4. Error Handling**
- **Principle**: Graceful error handling with user feedback
- **Implementation**: Try-catch blocks with meaningful error messages
- **Example**: Firebase operations with user-friendly error alerts

---

## üìù **Development Guidelines**

### **1. Code Organization**
- **`graph.js`**: Core graph functionality and node management
- **`library.js`**: Data persistence and Firebase integration
- **`generate.js`**: Form generation and conditional logic
- **`script.js`**: General utilities and autosave
- **`events.js`**: Event handling and user interactions
- **`context-menus.js`**: Context menu functionality

### **2. Naming Conventions**
- **Functions**: camelCase with descriptive names
- **Variables**: camelCase with clear purpose
- **Constants**: UPPER_CASE for configuration values
- **CSS Classes**: kebab-case for styling

### **3. Debugging**
- **Console Logs**: Structured logging with prefixes (e.g., `üîç [COUNTY QUESTION DEBUG]`)
- **Error Handling**: Comprehensive error catching and reporting
- **User Feedback**: Clear success/error messages for all operations

---

## üéØ **Future Enhancement Opportunities**

### **1. Performance Optimizations**
- Lazy loading for large flowcharts
- Virtual scrolling for long node lists
- Debounced autosave to reduce server load

### **2. User Experience**
- Undo/redo functionality
- Keyboard shortcuts for common actions
- Drag-and-drop reordering of nodes

### **3. Advanced Features**
- Collaborative editing
- Version control for flowcharts
- Template marketplace
- Advanced conditional logic builder

---

*Last Updated: [Current Date]*
*Version: 1.0*
*Maintainer: Development Team*

