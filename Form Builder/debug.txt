# Debugging Mode Documentation

Heres how this basically works. First the user is gonna give you a problem and tell you to go into debug Mode
Your goal is to edit generate.js until it generates the correct output.html
Everytime the user prompts you in debug mode, it will usually just be with a console log (always from output.html)
Your goal is to assess the console log to see if your edits to generate.js actually solved the issue in output.html
If it didnt solve the issue, then asses whats going wrong using the console logs and then fix it
If you cant tell whats wrong, then add more console logs in generate.js so it generates output.html which is easier to debug
We will rinse and repeat this process until output.html has the correct functionality, validated by the console logs
You should remove any console logs that do no pertain to the current issue you are trying to solve
This will help keep the console log clear and concise 
You should always be reading output.html for context on what the current generate.js is producing. 
You can always assume that the output.html is the most up to date one and generated using the most recently updated generate.js
NEVER edit output.html directly, your goal is to edit generate.js which will then regenerate output.html

## üîç **Error Analysis Process:**

### **Step 1: Analyze the Error in output.html**
- First asses your goal, what should be happening
- Look at the console logs to see what's actually happening
- Identify what's working vs. what's not working
- Look for missing expected logs or unexpected behavior

### **Step 2: Understand Why generate.js is Generating the Error**
- Examine the generated code in output.html to see what generate.js actually produced
- Compare it with what I intended to generate
- Identify the root cause in generate.js logic

### **Step 3: Fix generate.js to Prevent the Error**
- Modify the generate.js code to produce the correct output.html
- Test the fix by regenerating and checking the new output.html

## üéØ **Debugging Best Practices:**

1. **Always check output.html first** - see what generate.js actually produced
2. **Compare expected vs. actual behavior** - look for missing logs or unexpected results
3. **Trace the execution flow** - understand which code paths are being taken
4. **Fix the root cause in generate.js** - don't just patch the symptoms
5. **Use console logs** - whenever the user gives you console logs, assume that they are from output.html These are your best shot at figuring out the problem quickly.

## üìù **Common Issues:**

- **Logic in wrong pass**: Autofill logic in first pass but data in second pass
- **Missing conditions**: Logic not triggered because conditions aren't met
- **Scope issues**: Variables not accessible in callback functions
- **Timing issues**: Code running before elements are created
- **Duplicate logic**: Same logic in multiple places causing conflicts
